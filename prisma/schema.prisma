generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           String            @id @default(uuid())
  name         String?           @db.VarChar(255)
  email        String            @unique @db.VarChar(255)
  createdAt    DateTime          @default(now())
  passwordHash String            @db.VarChar(255)
  updatedAt    DateTime          @updatedAt
  planName     String?           @db.VarChar(255)
  plan         Plan?             @relation(fields: [planName], references: [name])
  role         Role              @default(USER)
  budgets      Budget[]
  categories   ExpenseCategory[]
  cards        Card[]
  goals        Goal[]

  @@index([email, createdAt])
}

model Plan {
  id               String   @id @default(uuid())
  name             String   @unique @db.VarChar(255)
  price            Float
  description      String?  @db.Text
  budgetLimit      Int      @default(0)
  transactionLimit Int      @default(0)
  features         String[]
  users            User[]

  @@index([name, price])
}

model Budget {
  id           String        @id @default(uuid())
  name         String        @db.VarChar(255)
  amount       Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@unique([userId, name]) // Garantir unicidade por usu√°rio e nome
}

model ExpenseCategory {
  id           String        @id @default(uuid())
  name         String        @db.VarChar(255)
  description  String?       @db.Text
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@unique([userId, name])
  @@index([userId, name])
}

model Transaction {
  id          String           @id @default(uuid())
  description String?          @db.VarChar(255)
  amount      Float
  date        DateTime         @default(now())
  budgetId    String
  budget      Budget           @relation(fields: [budgetId], references: [id])
  categoryId  String?
  category    ExpenseCategory? @relation(fields: [categoryId], references: [id])
}

model Card {
  id     String @id @default(uuid())
  name   String @db.VarChar(255)
  number String @db.VarChar(16)
  limit  Float
  dueDay Int
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId, name])
}

model Goal {
  id            String    @id @default(uuid())
  name          String    @db.VarChar(255)
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id])

  @@unique([userId, name])
  @@index([userId, name])
}
